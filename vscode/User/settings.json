{
  "workbench.colorTheme": "Monokai",
  "editor.fontFamily": "Monaco, 'Courier New', monospace",
  "editor.fontSize": 14,
  "C_Cpp.autocomplete": "disabled",
  "C_Cpp.intelliSenseEngine": "disabled",
  "cmake.showOptionsMovedNotification": false,
  "editor.minimap.enabled": false,
  "workbench.iconTheme": "material-icon-theme",
  /*
   * Terminal look
   *
   * VS Code automatically uses your default shell, but I'm setting it
   * explicitly. Most of the look is already taken care of, but here are some
   * settings that aren’t.
   */
  "terminal.integrated.profiles.osx": {
    "zsh": {
      "path": "/opt/homebrew/bin/zsh",
      "args": [
        "-l"
      ]
    }
  },
  // Run tasks in interactive shell, otherwise some things (like pnpm installed
  // using corepack) aren't working
  "terminal.integrated.automationProfile.osx": {
    "path": "/opt/homebrew/bin/zsh",
    "args": [
      "-i"
    ]
  },
  "terminal.integrated.defaultProfile.osx": "zsh",
  "terminal.integrated.fontSize": 15,
  "terminal.integrated.lineHeight": 1.1,
  "terminal.integrated.cursorStyle": "line",
  "terminal.integrated.cursorStyleInactive": "none",
  "terminal.integrated.cursorWidth": 2,
  "terminal.integrated.shellIntegration.decorationsEnabled": "never",
  "terminal.integrated.shellIntegration.showCommandGuide": false,
  "terminal.integrated.stickyScroll.enabled": false,
  "terminal.integrated.tabs.enableAnimation": false,
  "terminal.integrated.tabStopWidth": 2,
  // Use normal colors for bold text
  "terminal.integrated.drawBoldTextInBrightColors": false,
  // Without this, the customized colors will be washed out
  "terminal.integrated.minimumContrastRatio": 1,
  "terminal.integrated.copyOnSelection": true,
  // Make VS Code consume the keybinding instead of sending the key presses for the command you want to bind a keyboard shortcut to to the shell
  "terminal.integrated.commandsToSkipShell": [
    "workbench.action.closePanel"
  ],
  "terminal.integrated.gpuAcceleration": "on",
  "terminal.integrated.enablePersistentSessions": false,
  "terminal.integrated.initialHint": false,
  "terminal.integrated.hideOnStartup": "always",
  "terminal.integrated.tabs.showActions": "never",
  /*
  |--------------------------------------------------------------------------
  | Git and Source Control Management
  |--------------------------------------------------------------------------
  */
  // Show me whitespace in diffs, just in case some slips through, and shows up in the GitHub PR
  "diffEditor.ignoreTrimWhitespace": false,
  "diffEditor.experimental.showMoves": true,
  "git.closeDiffOnOperation": true,
  "git.confirmSync": false,
  "git.enableSmartCommit": true,
  "git.mergeEditor": true,
  "merge-conflict.autoNavigateNextConflict.enabled": true,
  "scm.diffDecorations": "gutter",
  "scm.diffDecorationsGutterPattern": {
    "modified": false
  },
  "scm.diffDecorationsIgnoreTrimWhitespace": "true",
  "scm.inputFontFamily": "editor",
  "scm.inputFontSize": 14,
  "scm.inputMaxLineCount": 20,
  "scm.inputMinLineCount": 4,
  "scm.showHistoryGraph": false,
  /*
  |--------------------------------------------------------------------------
  | The Little Things
  |--------------------------------------------------------------------------
  */
  // Don't update disabled extensions
  "extensions.autoUpdate": "onlyEnabledExtensions",
  "extensions.ignoreRecommendations": true,
  // Enabling highlighting of the indent guide for the current scope
  "editor.guides.highlightActiveIndentation": true,
  "editor.lineDecorationsWidth": "32", // Undocumented left padding
  // Syntax highlighting
  "files.associations": {
    "*.js.snap": "javascript",
    ".prettierrc": "json"
  },
  "files.exclude": {
    "**/.git": true,
    "**/.DS_Store": true,
    "**/Thumbs.db": true,
    // Show node_modules but don't show anything inside
    "node_modules/**/*": true,
    "**/.next": true
  },
  "search.seedOnFocus": true,
  // Exclude from search
  "search.exclude": {
    "**/package-lock.json": true,
    "**/pnpm-lock.yaml": true,
    "**/yarn.lock": true,
    "**/node_modules": true,
    "**/coverage": true,
    "**/dist": true,
    "**/build": true,
    "**/.build": true,
    "**/.gh-pages": true,
    "**/.git": true
  },
  "files.watcherExclude": {
    "**/.git/objects/**": true,
    "**/.git/subtree-cache/**": true,
    "**/node_modules/*/**": true,
    "**/.hg/store/**": true,
    "**/public/**": true,
    "**/tmp": true
  },
  "window.closeWhenEmpty": true,
  "window.restoreWindows": "all",
  "search.useParentIgnoreFiles": true,
  "editor.smoothScrolling": true,
  "editor.largeFileOptimizations": false,
  "editor.semanticHighlighting.enabled": true,
  "workbench.commandPalette.experimental.suggestCommands": true,
  "workbench.editorLargeFileConfirmation": 150,
  // Open JSON editor for settings
  "workbench.settings.editor": "json",
  "security.promptForLocalFileProtocolHandling": false,
  "task.problemMatchers.neverPrompt": {
    "npm": true
  },
  // Bracket pair colorization
  // Replaces: https://code.visualstudio.com/blogs/2021/09/29/bracket-pair-colorization
  "editor.guides.bracketPairs": true,
  "editor.bracketPairColorization.enabled": true,
  "editor.bracketPairColorization.independentColorPoolPerBracketType": true,
  // Controls if and when to render horizontal lines when a line of code crosses into another indentation level
  "editor.guides.bracketPairsHorizontal": "active",
  // When I accidentally hit copy without selecting anything and it overrides my clipboard
  "editor.emptySelectionClipboard": false,
  // Always use indentation from EditorConfig/Prettier instead of file own indentation
  "editor.detectIndentation": false,
  // Give it to me as fast as you have it
  "editor.quickSuggestionsDelay": 0,
  "editor.quickSuggestions": {
    "strings": "on"
  },
  // Depends on whether the language, related symbols, e.g. HTML tags, are updated while editing
  // Replaces: https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag
  // for HTML files only
  "editor.linkedEditing": true,
  // Show snippets after any other intellisense results so that TS types props go first
  "editor.suggestSelection": "first",
  "editor.snippetSuggestions": "bottom",
  "editor.suggest.snippetsPreventQuickSuggestions": false,
  /*
  |--------------------------------------------------------------------------
  | Accessibility
  |--------------------------------------------------------------------------
  */
  "editor.accessibilitySupport": "off",
  // To make links easier to distinguish from regular text in the workbench
  "accessibility.underlineLinks": true,
  /*
  |--------------------------------------------------------------------------
  | Code Validation & Formatting
  | (ESLint, Prettier, Stylelint & friends..)
  |--------------------------------------------------------------------------
  */
  // Common settings
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.formatOnSave": true,
  "editor.formatOnPaste": true,
  "editor.formatOnType": true,
  // Let ESLint fix any issues it can
  "editor.codeActionsOnSave": {
    "source.fixAll": "explicit",
    "source.organizeImports": "never"
  },
  //cpp
  "cmake.showOptionsMovedNotification": false,
  "clang.cxxflags": [
    "-std=c++11"
  ],
  "clang.cflags": [
    "-std=c11"
  ],
  "clangd.arguments": [
    // compile_commands.json 生成文件夹
    "--compile-commands-dir=${workspaceFolder}/build",
    // 让 Clangd 生成更详细的日志
    "--log=verbose",
    // 输出的 JSON 文件更美观
    "--pretty",
    // 全局补全(输入时弹出的建议将会提供 CMakeLists.txt 里配置的所有文件中可能的符号，会自动补充头文件)
    "--all-scopes-completion",
    // 建议风格：打包(重载函数只会给出一个建议）
    // 相反可以设置为detailed
    "--completion-style=bundled",
    // 跨文件重命名变量
    "--cross-file-rename",
    // 允许补充头文件
    "--header-insertion=iwyu",
    // 输入建议中，已包含头文件的项与还未包含头文件的项会以圆点加以区分
    "--header-insertion-decorators",
    // 在后台自动分析文件(基于 complie_commands，我们用CMake生成)
    "--background-index",
    // 启用 Clang-Tidy 以提供「静态检查」
    "--clang-tidy",
    // Clang-Tidy 静态检查的参数，指出按照哪些规则进行静态检查，详情见「与按照官方文档配置好的 VSCode 相比拥有的优势」
    // 参数后部分的*表示通配符
    // 在参数前加入-，如-modernize-use-trailing-return-type，将会禁用某一规则
    "--clang-tidy-checks=cppcoreguidelines-*,performance-*,bugprone-*,portability-*,modernize-*,google-*",
    // 默认格式化风格: 谷歌开源项目代码指南
    // "--fallback-style=file",
    // 同时开启的任务数量
    "-j=2",
    // pch优化的位置(memory 或 disk，选择memory会增加内存开销，但会提升性能) 推荐在板子上使用disk
    "--pch-storage=disk",
    // 启用这项时，补全函数时，将会给参数提供占位符，键入后按 Tab 可以切换到下一占位符，乃至函数末
    // 我选择禁用
    "--function-arg-placeholders=false",
    // compelie_commands.json 文件的目录位置(相对于工作区，由于 CMake 生成的该文件默认在 build 文件夹中，故设置为 build)
    "--compile-commands-dir=build"
  ],
  // JS
  "javascript.format.enable": false,
  "javascript.autoClosingTags": true,
  "javascript.preferences.importModuleSpecifier": "relative",
  "javascript.preferGoToSourceDefinition": true,
  "javascript.preferences.quoteStyle": "single",
  "javascript.updateImportsOnFileMove.enabled": "always",
  "javascript.validate.enable": false,
  // Auto import modules
  // Replaces: https://marketplace.visualstudio.com/items?itemName=steoates.autoimport
  "javascript.suggest.autoImports": true,
  // Path Intellisense
  // Replaces: https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense
  "javascript.suggest.paths": true,
  // TS
  "typescript.format.enable": false,
  "typescript.autoClosingTags": true,
  "typescript.preferences.importModuleSpecifier": "relative",
  "typescript.preferences.quoteStyle": "single",
  "typescript.updateImportsOnFileMove.enabled": "always",
  "typescript.preferences.preferTypeOnlyAutoImports": true,
  "typescript.workspaceSymbols.scope": "currentProject",
  "typescript.preferGoToSourceDefinition": true,
  "typescript.enablePromptUseWorkspaceTsdk": true,
  // Auto import modules
  // Replaces: https://marketplace.visualstudio.com/items?itemName=steoates.autoimport
  "typescript.suggest.autoImports": true,
  // Path Intellisense
  // Replaces: https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense
  "typescript.suggest.paths": true,
  // HTML
  "html.format.enable": false,
  "html.format.wrapLineLength": 0,
  // Auto closing HTML tags
  // Replaces: https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag
  "html.autoClosingTags": true,
  // JSON
  "json.format.enable": true,
  // Markdown
  "markdown.validate.enabled": true,
  "[cpp]": {
    "editor.defaultFormatter": "xaver.clang-format",
    "editor.formatOnSave": true
  },
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[javascriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[markdown]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": false,
    // If you want a hard line-break (<br>) in the output,
    // we need to put two or more spaces at the end of a line.
    // It is a part of CommonMark, so we don’t want to prevent it.
    "files.trimTrailingWhitespace": false
  },
  "[html]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[astro]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true
  },
  "[prisma]": {
    "editor.defaultFormatter": "Prisma.prisma"
  },
  "[scminput]": {
    "editor.rulers": [
      72
    ],
    "editor.wordWrap": "wordWrapColumn",
    "editor.wordWrapColumn": 72
  },
  /*
  |--------------------------------------------------------------------------
  | 3rd Party Plugins
  |--------------------------------------------------------------------------
  */
  "doxdocgen.generic.authorEmail": "wumingfei@bytedance.com",
  "doxdocgen.generic.authorName": "wumingfei",
  "prettier.requireConfig": true,
  "prettier.useEditorConfig": false,
  "eslint.rules.customizations": [
    {
      "rule": "*",
      "fixable": true,
      "severity": "info"
    }
  ],
  "eslint.useESLintClass": true,
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact",
    "html",
    "astro"
  ],
  // "catppuccin-icons.hidesExplorerArrows": true,
  // Code Spell Checker
  "cSpell.spellCheckDelayMs": 500,
  "cSpell.enableFiletypes": [
    "shellscript",
    "mdx"
  ],
  "cSpell.customDictionaries": {
    "my-dictionary": {
      "name": "my-dictionary",
      "path": "~/dotfiles/vscode/spellright.dict",
      "scope": "user",
      "addWords": true
    }
  },
  "cSpell.userWords": [
    "antd",
    "apiaction",
    "bizdev",
    "clsx",
    "consts",
    "Contentful",
    "dedupe",
    "dups",
    "fecha",
    "graphql",
    "hocs",
    "Inititalize",
    "lifecycles",
    "linebreak",
    "linkedin",
    "Mapbox",
    "mapboxgl",
    "mediabox",
    "middlewares",
    "resetpassword",
    "sendgrid",
    "Smartlist",
    "smartlists",
    "stackoverflow",
    "strapi",
    "tanstack",
    "testid",
    "Timeframe",
    "typecheck",
    "uncommented",
    "Upvotes",
    "userspermissions",
    "watchlist"
  ],
  // ErrorLens
  "errorLens.fontSize": "14",
  // Hide info (like unknown words) messages from output to clean up a bit
  "errorLens.enabledDiagnosticLevels": [
    "error",
    "warning",
    "hint"
  ],
  "errorLens.exclude": [
    "never (read|used)",
    "Unknown word"
  ],
  "errorLens.errorGutterIconColor": "#bc5248",
  "errorLens.warningGutterIconColor": "#de9e59",
  "errorLens.hintGutterIconColor": "#eeceac",
  "color-highlight.markRuler": false,
  "color-highlight.matchWords": false,
  // Important Git config
  "git.autoStash": true,
  "git.autofetch": true,
  "git.allowForcePush": true,
  "git.inputValidationSubjectLength": 50,
  "git.openRepositoryInParentFolders": "always",
  // Sonarlint
  "sonarlint.rules": {
    "javascript:S6478": {
      "level": "off"
    },
    "typescript:S6478": {
      "level": "off"
    },
    "typescript:S6544": {
      "level": "off"
    },
    "typescript:S4123": {
      "level": "off"
    },
    "typescript:S6582": {
      "level": "off"
    },
    "typescript:S3776": {
      "level": "off"
    },
    "javascript:S4138": {
      "level": "off"
    },
    "typescript:S3735": {
      "level": "off"
    },
    "typescript:S1135": {
      "level": "off"
    },
    "typescript:S6598": {
      "level": "off"
    },
    "typescript:S6564": {
      "level": "off"
    },
    "typescript:S6509": {
      "level": "off"
    },
    "Web:S1135": {
      "level": "off"
    }
  },
  "yaml.customTags": [
    "!And",
    "!And sequence",
    "!If",
    "!If sequence",
    "!Not",
    "!Not sequence",
    "!Equals",
    "!Equals sequence",
    "!Or",
    "!Or sequence",
    "!FindInMap",
    "!FindInMap sequence",
    "!Base64",
    "!Join",
    "!Join sequence",
    "!Cidr",
    "!Ref",
    "!Sub",
    "!Sub sequence",
    "!GetAtt",
    "!GetAZs",
    "!ImportValue",
    "!ImportValue sequence",
    "!Select",
    "!Select sequence",
    "!Split",
    "!Split sequence"
  ],
  "githubPullRequests.defaultMergeMethod": "squash",
  "githubPullRequests.fileListLayout": "flat",
  "githubPullRequests.pullPullRequestBranchBeforeCheckout": "pullAndMergeBase",
  "tailwindCSS.classAttributes": [
    "class",
    "className",
    "ngClass",
    "variants"
  ],
  //glsl
  "glsllint.glslangValidatorPath": "/Users/bytedance/Documents/systemsetting/glslangValidato/bin/glslangValidator",
}
